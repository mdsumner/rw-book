# Grids, coordinates, and geospatial conventions {.unnumbered}

Some grids are not actually rectilinear or curvilinear


- a grid can present as rectilinear because of numeric precision 
- a grid can present as curvilinear because of explicit storage of longlat arrays when the data was projected
- other situations are possible


NetCDF and xarray will by requirement present as rectilinear by expanding a regular to explicit centre-point coord arrays, this is described as *degenerate rectliinear*. Note that the R function `image()` uses this model to plot a regular grid, but `rasterImage()` uses a straight extent (+optional rotation). The rotation can be converted from the affine transform. 

I think that this leads to a family of cases that are all valid and desirable, but currently quite complicated to separate and access intentionally for various reasons. 


-(A) a non-georeferenced array   
-(B) a georeferenced array in standard geospatial affine (either corner-aligned bbox, or actual offset/scale/shear)
-(C) a degenerate rectilinear form of (B), we store xs and ys explicitly as centre-coords (but they are a monotonic regular-increasing sequence (or decreasing, still equivalent))
-(D) a degenerate rectilinear form of (B), but untransformed from native projected to longitude and latitude (i.e. old Aviso Mercator stored in longlat rectilinear netcdf)
-(E) a degenerate curvilinear form of (B), we store every longitude and latitude untransformed from the projected transform
-(F) a degenerate curvilinear form of (C), we store every native X and Y from the projected transform (this never happens, though native longlat stored this way is not out of the question, equivalent but less compact than (C))
-(G) truly actual rectilinear (but note cases of (D))
-(H) truly actual curvilinear (but note cases of (E))



## How does software see this world

The xarray model. Everything is stored in rectilinear or curvilinear form explicitly. 

What happens downstream in xarray is not something I have experience with, I don't know about regridding aspects there. To me this belongs upstream, the xarray model is perfectly suited to lazy processing of array data so it's about getting source data into a representable virtual array. 


The GDAL model. If it's georeferenced it's B. If not georeferenced (or georferenced but still has coord arrays): 

- non-georeferenced, positioned in affine transform with 1,0 values ( so upside down to normal)
- actual rectilinear, either cleanly converted to B, or with a B-interpretation (for RasterIO) and coord arrays available (for Warp), this covers D as well because we can't tell
- actual curvilinear, every coordinate stored (very very usually longlat), covers also E because we can't tell
- 

All of these cases are subject to interpretation. We can assign a transform (or extent), we can assign rectilinear or curvlinear coords, we can assign GCPs, RPCs. Consider that two GCPs placed diagonally on an unferenced grid is enough to register an unreferenced regular grid, just relative pixel position converted to "world" coordinates by offset and scale.  With a coordinate model assigned, the trivial case is ready to go for RasteIO or warp, with other cases we can RasterIO but the geolcation model will be copied along. With Warp, we will resolve to a regular longlat grid (Atlantic or Pacific as per extent), or to any grid we choose. 

## Example - unreferenced array

This PNG image has a map of the world. We can assign the extent because we know what it is. 

```{python}
png = "https://github.com/cran/rgl/blob/master/inst/textures/worldsmall.png?raw=true"

import rioxarray
import rasterio
ds = rasterio.open(f"/viscurl/{png}"

```

A matrix data set on the internet, maybe volcano. 

A matrix in Python, use DATAPOINTER - show the warp or RasterIO algorithms, we'll use this later. 

## Example  - referenced dataset

(All of the previous examples were made into referenced datasets). 

Straightforward stuff, a Sentinel image, a tile server, a massive COG, a simple NetCDF. 

## Example  - degenerate rectilinear

Where does this cause problems. 

- mistakes in plotdap


## Example  - degenerate rectilinear from a projection

The AVISO files - https://github.com/mdsumner/talks/blob/master/AAD_April2014/mercator1.png
. 